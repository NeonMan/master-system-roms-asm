	;.include /font_8x8.inc/
	.include /font_6x8.inc/
	.include /vdp.inc/

	.area    _HEADER (ABS)
	; --- VDP blob ---
    
	; Font
	.org #0x0000
	font

	; Pattern name table (tilemap)
	;   - Lower
	.org (#0x3800)
	.ascii "LO Character buffer"

	;   - Upper
	.org (#0x3C00)
	.ascii "HI Character buffer"

; --- Regular ROM addresses begin here ---
	.org #0xC000
	DI
	JP program_main

; --- interrupt vectors ---
	.org #0xC038
	JP update_screen

	.org #0xC080
program_main:
	;Put registers into a known state
	LD SP, #0xDFF0 ;SP on RAM top

	; Restore CRAM
	LD A, #0x00
	OUT (#0xBF), A
	LD A, #0xC0
	OUT (#0xBF), A
	LD B, #cram_data_end-cram_data ;32Bytes
	LD HL, #cram_data
	cram_loop:
		LD A, (HL)
		OUT (#0xBE), A
		INC HL
	DEC B
	JR NZ, cram_loop

	;Restore VDP registers
	IN A, (#0xBF)
	LD HL, #vdp_regs
	LD B, #vdp_regs_end-vdp_regs
	reg_loop:
		LD A, (HL)
		OUT (#0xBF), A
		INC HL
	DEC B
	JP NZ, reg_loop

	; Enable VDP, get vdp_regs second entry and set the enable bit
	LD HL, #(vdp_regs + 2)
	LD A, (HL)
	OR A, #0b01000000
	OUT (#0xBF), A
	LD A, #0x81
	OUT (#0xBF), A

	; Upload test pattern to screen
	;CALL update_screen

	; --- Enable interrupts ---
	IM 1
	EI

	; --- Loop forever ---
	end_loop:
	JR end_loop

; --- Screen update routine ---
; --- Uses: AF, BC, HL
update_screen:
	;LD A, #0x0F    ;
	;OUT (#0xBF), A ;
	;LD A, #0x82    ;
	;OUT (#0xBF), A ; Set Pattern name table address to 0x3C00 (high buffer)
	set_vram_addr #0x3b, #0xFF ; Set VRAM address to 0x3C00 - 1 for upload

	;LD HL, #term_characters
	;40x24 (960) upload
	;LD BC, #960
	;upload_loop:
	;	LD A, (HL)
	;	OUT (#VDP_DATA_PORT), A
	;	INC HL
	;	DEC BC
	;	XOR A
	;CP C
	;JR NZ, upload_loop
	;CP B
	;JR NZ, upload_loop

	;OUTI version
	LD HL, #term_characters
	XOR A
	LD C, #VDP_DATA_PORT
	LD B, A ;
	OTIR    ; 256 written (704 remaining)
	LD B, A ;
	OTIR    ; 256 written (448 remaining)
	;LD B, A ;
	;OTIR    ; 256 written (192 remaining)
	;LD B, #192
	;OTIR

	; Set color
	LD A, (#term_color)
	OUT (#0xBF), A ;
	LD A, #0x87    ;
	OUT (#0xBF), A ; Set text/bkg color register

	; Re-enable interrupts and return
	EI
	RET

; --------------------------------------
; --- RAM variables (with init data) ---
; --------------------------------------

cram_data:
	.db 0x00, 0x00, 0x08, 0x0c, 0x10, 0x30, 0x01, 0x3c, 0x02, 0x03, 0x05, 0x0f, 0x04, 0x33, 0x15, 0x3f
	.db 0x3f, 0x3f, 0x08, 0x0c, 0x10, 0x30, 0x01, 0x3c, 0x02, 0x03, 0x05, 0x0f, 0x04, 0x33, 0x15, 0x00
	cram_data_end:

vdp_regs:
	.db 0b00000000, 0x80  ;Reg #0
	.db 0b10110000, 0x81  ;Reg #1  (Enable frame interrupt)
	.db 0x0F, 0x82        ;Reg #2  (Pattern name table [13,10]) 
	.db 0x60, 0x83        ;Reg #3  (Colour table [13,6]) @0x1800
	.db 0x00, 0x84        ;Reg #4  (Pattern generator table [13,11])
	.db 0x00, 0x85        ;Reg #5  (Sprite attribute table [13,7])
	.db 0x00, 0x86        ;Reg #6  (Sprite generator table [13,12])
	.db 0xE0, 0x87        ;Reg #7  (Text/Background color [3,0] [3,0])
	.db 0x08, 0x88        ;Reg #8
	.db 0x00, 0x89        ;Reg #9
	.db 0xff, 0x8a        ;Reg #10/Ah
	vdp_regs_end:

; --- background/foreground color
term_color:
	.db 0xE0

; --- Screen character buffer, 40x24 (960) bytes, with sample data ---
term_characters:
	.ascii "01 MasterTerm version 0.0.0 r000        "
	.ascii "02 Size 40x24 characters                "
	.ascii "03 Monochrome, I guess                  "
	.ascii "04 -------------------------------------"
	.ascii "05 -------------------------------------"
	.ascii "06 -------------------------------------"
	.ascii "07 -------------------------------------"
	.ascii "08 -------------------------------------"
	.ascii "09 -------------------------------------"
	.ascii "10 -------------------------------------"
	.ascii "11 -------------------------------------"
	.ascii "12 -------------------------------------"
	.ascii "13 -------------------------------------"
	.ascii "14 -------------------------------------"
	.ascii "15 -------------------------------------"
	.ascii "------------ Codepage  dump ------------"
	.db 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
	.db 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F
	.db 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F
	.db 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F
	.db 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F
	.db 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF
	.db 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF
	.db 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF
	;.ascii "                        " ; <-- Padding for TEXT Mode
	.ascii "------------------------" ; <-- Padding for TEXT Mode
	.ascii "24--------------------------------------"

; --- The last defined bytes of the ROM ---
	; Canary to check for stack overflows over to executable code
	.ascii "*tweet~ tweet~*"

; --- The last bytes of the ROM ---
	.org #0xDFF0
	; Canary to prevent code from growing too large.
	.ascii "*chirp~ chirp~*"
	.db #0x00

; --- Nothing on _CODE ---
	.area _CODE (REL)

;Make the compiler quit complaining about _DATA
.area   _HOME
.area   _CODE
.area   _INITIALIZER
.area   _GSINIT
.area   _GSFINAL

.area   _DATA
.area   _INITIALIZED
.area   _BSEG
.area   _BSS
.area   _HEAP

.area   _CODE
